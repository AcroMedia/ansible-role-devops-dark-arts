#!/bin/bash -ue



# Resets root's mysql password with the value specified in /root/.my.cnf
# Does a bunch of sanity checking to make sure we don't perform SQL injection or other unsafe things.



# Config
ROOT_MY_CNF="/root/.my.cnf"
ROOT_MY_PASSWORD="" # Will be populated at runtime.
MYSQL_INIT="/etc/init.d/mysql" # Default to ubuntu style. Will get overridden if we're on red hat / centos.


function main () {
  run_sanity_checks
  get_root_my_password  # && debug "ROOT_MY_PASSWORD: $ROOT_MY_PASSWORD"
  get_mysql_init_path # && debug "MYSQL_INIT: $MYSQL_INIT"
  reset_mysql_root_password
}


function reset_mysql_root_password () {

  debug "Stopping mysql"
  "$MYSQL_INIT" stop || echo "Mysql was not running? Hmmm."
  while pgrep mysqld; do
    cerr "Waiting for mysql processes to exit..."
    sleep 2
  done

  #info "Starting mysql in safe mode"
  mysqld_safe --skip-grant-tables --bind-address=127.0.0.1 & # ignores user permissions, prevents remote logins
  sleep 5
  # while lsof -i -n -l -P -sTCP:LISTEN 2>&1 |grep -v ':3306'; do
  #   cerr "Waiting for mysql to start in safe mode..."
  #   sleep 3
  # done

  debug "Resetting password"
  mysql -uroot -D mysql -e "update user set password=PASSWORD('${ROOT_MY_PASSWORD}') where user='root'; flush privileges;"
  sleep 2

  debug "Shutting down safe mode"
  mysqladmin -uroot  -p"$ROOT_MY_PASSWORD" --protocol=tcp -h127.0.0.1 shutdown
  sleep 2
  while pgrep mysqld_safe; do
    cerr "Waiting for mysql processes to exit..."
    sleep 2
  done

  debug "Restarting in normal mode"
  "$MYSQL_INIT" start
  # while pgrep -v mysqld; do
  #   cerr "Waiting for mysql to start..."
  #   sleep 2
  # done

  mysqlshow
  info "If you're seeing this message, the mysql root password was reset successfully."

}


function get_mysql_init_path () {
  if test -x "/etc/init.d/mysql"; then
    MYSQL_INIT="/etc/init.d/mysql"
  elif test -x "/etc/init.d/mysqld"; then
    MYSQL_INIT="/etc/init.d/mysqld"
  else
    fatal "Could not determine path to mysql init.d script."
    abort
  fi
}


function require_myconf_username_is_root () {
  ROOT_MY_USERNAME="$(crudini --get "$ROOT_MY_CNF" client username > /dev/null 2>&1)" || {
    # An error will mean the username was not specified, which is a good thing.
    # We already checked for the existence of the file, and the existence of the utility, so this can pretty much be the only error we encounter here.
    true
  }
  ROOT_MY_USERNAME="$(strip_unsafe_sql_chars "$ROOT_MY_USERNAME")"
  if [[ "$ROOT_MY_USERNAME" == "root" || "$ROOT_MY_USERNAME" == "" ]]; then
    true # All is well.
  else
    err "This script will not work properly if the username specified in $ROOT_MY_CNF is not 'root'."
    abort
  fi
}



function get_root_my_password () {
  ROOT_MY_PASSWORD="$(crudini --get "$ROOT_MY_CNF" client password)" || {
    err "The password could not be retrieved from $ROOT_MY_CNF"
    abort
  }
  ROOT_MY_PASSWORD="$(strip_unsafe_sql_chars "$ROOT_MY_PASSWORD")"
  if test -z "$ROOT_MY_PASSWORD"; then
    err "The password specified in $ROOT_MY_CNF seems to be empty."
    abort
  fi
}


function run_sanity_checks () {
  require_root
  require_rootmycnf
  require_myconf_username_is_root
  require_safe_perms_on_rootmycnf
  require_package "crudini"
  require_script "mysqlshow"
  require_script "mysqladmin"
  require_script "mysqld_safe"
  require_script "lsof"
  require_script "stat"
  require_script "cut"
  if_it_aint_broken_dont_fix_it
  cerr "Sanity checks passed. Password reset will be attempted."
}


function if_it_aint_broken_dont_fix_it () {
  if mysqlshow > /dev/null 2>&1; then
    err "Mysqlshow doens't generate an error. You don't need to run this script."
    abort
  fi
}


function require_safe_perms_on_rootmycnf () {
  OCTAL_PERM="$(stat -c "%a" "$ROOT_MY_CNF")"
  PERM_SIZE="${#OCTAL_PERM}"
  if [ "$PERM_SIZE" -ne 3 ]; then
    fatal "Unexpected error when parsing permissions length on $ROOT_MY_CNF (expected 600 / len 3; found $OCTAL_PERM / len $PERM_SIZE)."
    cerr "You'll need to reset permissions on the file, and try again."
    abort
  fi
  GROUP_PERM="$(echo "$OCTAL_PERM" |cut -c2)"
  EVERYONE_PERM="$(echo "$OCTAL_PERM" |cut -c3)"
  if [[ "$GROUP_PERM" != "0" ]] || [[ "$EVERYONE_PERM" != "0" ]]; then
    err "Unsafe permissions on $ROOT_MY_CNF (expected 600; found $OCTAL_PERM)."
    cerr "You'll need to fix permissions manually on that file before continuing."
    cerr "You should also reset the password in it after you fix permissions. Other users might been able to read it."
    abort
  fi
}

function require_rootmycnf () {
  test -f "$ROOT_MY_CNF" || {
    err "There is no $ROOT_MY_CNF to read the root mysql password from."
    abort
  }
}

# Strips all double quotes, single quotes, tildes, and backslashes from a string.
function strip_unsafe_sql_chars () {
  TEMPVAL="$1"
#  sed -e 's/^"//' -e 's/"$//' <<< "$TEMPVAL"    # If you only wanted double quotes from the beginning and end.
  TEMPVAL="$(echo -n "$TEMPVAL"|sed -e "s/'//g")"
  TEMPVAL="$(echo -n "$TEMPVAL"|sed -e 's/"//g')"
  TEMPVAL="$(echo -n "$TEMPVAL"|sed -e 's/`//g')"
  TEMPVAL="$(echo -n "$TEMPVAL"|sed -e 's/\\//g')"
  echo -n "$TEMPVAL"
}

function require_script () {
  type "$1" > /dev/null  2>&1 || {
    err "The following is not installed or not in path: $1"
    abort
  }
}

function require_package () {
  type "$1" > /dev/null  2>&1 || {
    apt-get -y install "$1" || yum -y install "$1"
  }
}

function require_root() {
  if [ $EUID -ne 0 ]; then
    err "This script must be run as root."
    abort
  fi
}

function fatal () {
  bold_feedback "Fatal" "$@"
}

function err () {
  bold_feedback "Err" "$@"
}

function info () {
  cerr "$@"
}

function debug () {
  #cerr "$@"  # Uncomment for debugging.
  true  # Bash functions can't be empty.
}

function bold_feedback () {
  BOLD=$(tput bold)
  UNBOLD=$(tput sgr0)
  cerr "${BOLD}${1}:${UNBOLD} ${2}"
}

function abort () {
  cerr "Aborting."
  exit 1
}

function cerr() {
  >&2 echo "$@"
}

main "$@"