#!/bin/bash
set -eu -o pipefail

function main () {

  if [ $EUID -ne 0 ]; then
    warn 'This script should be run as root to avoid permissions problems.'
  fi

  if aws --version 2>&1 | grep -qw 'aws-cli'; then
    true
  else
    err 'No AWS CLI utility found.'
    exit 1
  fi

  if gzip --version | grep -qw GNU ; then
    true
  else
    err 'No GNU gzip utility found.'
    exit 1
  fi

  if tar --version | grep -qw GNU ; then
    true
  else
    err 'No GNU tar utility found.'
    exit 1
  fi

  if date --iso-8601 >/dev/null; then
    true
  else
    err "No usable 'date' util found."
    exit 1
  fi

  if sed --version | grep -qw GNU; then
    true
  else
    err "No GNU 'sed' found."
    exit 1
  fi

  if tr --version | grep -qw GNU; then
    true
  else
    err "No GNU 'tr' found."
    exit 1
  fi

  local DB_NAME=${1:-}
  if [ -z "$DB_NAME" ]; then
    err "Missing required positional (unnamed) argument for DB_NAME"
  fi
  local S3_ARCHIVE_DEST=${2:-}
  if [ -z "$S3_ARCHIVE_DEST" ]; then
    err "Missing required positional (unnamed) argument for S3_ARCHIVE_DEST"
  fi


  if [[ "$S3_ARCHIVE_DEST" =~ ^s3://.*/.*\.sql\.gz$ ]]; then
    true
  else
    err "S3_ARCHIVE_DEST must be a fully formed path, including the protocol and a sql.gz filename extension. E.g: s3://bucket-name/db-name.sql.gz'"
  fi

  # Let the user sort out trival errors before try connecting to anything.
  if [ "$ERRORS" -gt 0 ]; then
    cerr '✘'
    exit "$ERRORS"
  fi

  MYSQLDUMP_DEFAULT="mysqldump --defaults-file=/root/.my.cnf --single-transaction --quick --events --ignore-table=mysql.events"
  MYSQLDUMP="${MYSQLDUMP:-$MYSQLDUMP_DEFAULT}" # let cmd be overridden by env var
  cerr "Testing mysqldump..."
  if ($MYSQLDUMP --version > /dev/null); then
    true
  else
    err "No mysqldump command found."
    cerr '✘'
    exit 1
  fi

  MYSQLCMD_DEFAULT="/usr/bin/mysql --defaults-file=/root/.my.cnf"
  MYSQLCMD=${MYSQLCMD:-$MYSQLCMD_DEFAULT}  # Let it be overridden by env var

  cerr "Testing database connectivity..."
  DB_TEST=$($MYSQLCMD -e "use $DB_NAME" 2>&1) || {
    err "Could not connect to db: $DB_NAME"
    cerr '✘'
    exit 1
  }
  if echo "$DB_TEST"| grep ERROR; then
    err "Could not connect to db: $DB_NAME"
    cerr '✘'
    exit 1
  fi

  S3_ARCHIVE_FILENAME=$(basename "$S3_ARCHIVE_DEST")
  S3_ARCHIVE_CONTAINER=$(dirname "$S3_ARCHIVE_DEST")

  #  Try writing to the container first; if its a sub-directory that doesnt exist yet, this will create it and keep the filtered_list test from failing.
  if ! (echo "write-test $S3_ARCHIVE_DEST $(date +%s)" | aws s3 cp - "${S3_ARCHIVE_CONTAINER}/._write_permissions_test"); then
    cerr ''
    cerr "The test to see if we can write to ${S3_ARCHIVE_CONTAINER} failed."
    cerr "Check for misspellings, make sure you have bucket read/write permissions, and try again."
    cerr '✘'
    exit 1
  fi

  # List the bucket contents so we can refuse to overwrite existing objects.
  BUCKET_LIST=$(aws s3 ls "$S3_ARCHIVE_CONTAINER") || {
    cerr ''
    cerr "The test to see if we read the contents of ${S3_ARCHIVE_CONTAINER} failed."
    cerr "Since the script checks contents to make sure it wont overwrite existing files, read access to the bucket is necessary."
    cerr "Check for misspellings, make sure you have bucket read/write permissions, and try again."
    cerr '✘'
    exit 1
  }
  FILTERED_LIST=$(echo "$BUCKET_LIST" | grep -ow "$S3_ARCHIVE_FILENAME\$") || true
  if [[ "$FILTERED_LIST" == "$S3_ARCHIVE_FILENAME" ]]; then
    err "S3 archive already exists: ${S3_ARCHIVE_DEST}"
    cerr "Remove the old archive, or specify a different destination name."
    cerr '✘'
    exit 1
  else
    #shellcheck disable=SC2086
    nice -n 19 ionice -c2 -n7 $MYSQLDUMP "$DB_NAME" | gzip | aws s3 cp - "$S3_ARCHIVE_DEST"
    echo "$S3_ARCHIVE_DEST" #  our only output to stdout should be the file we created.

  fi
  cerr "✔"

}

ERRORS=0
function err () {
  cerr "ERR: $*"
  ERRORS=$((ERRORS+1))
}

WARNINGS=0
function warn () {
  cerr "WARN: $*"
  WARNINGS=$((WARNINGS+1))
}

NOTICES=0
function notice () {
  cerr "NOTICE: $*"
  NOTICES=$((NOTICES+1))
}

function cerr () {
  >&2 echo "$*"
}


main "$@"
